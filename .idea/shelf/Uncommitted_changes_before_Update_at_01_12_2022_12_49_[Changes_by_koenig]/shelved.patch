Index: src/main/java/snaked/model/GameBoard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package snaked.model;\r\n\r\nimport lombok.Getter;\r\n\r\nimport java.nio.file.Path;\r\nimport java.util.*;\r\n\r\npublic class GameBoard {\r\n    private final BoardCell[][] cells;\r\n\r\n    private List<Coordinate> snakeCoords = new ArrayList<>();\r\n    @Getter\r\n    private final Path backgroundImage;\r\n    @Getter\r\n    private final int gameBoardHeight;\r\n    @Getter\r\n    private final int gameBoardWidth;\r\n\r\n    public GameBoard(int gameBoardHeight, int gameBoardWidth, Path backgroundImage) {\r\n        this.gameBoardHeight = gameBoardHeight;\r\n        this.gameBoardWidth = gameBoardWidth;\r\n        this.backgroundImage = backgroundImage;\r\n        cells = new BoardCell[gameBoardHeight][gameBoardWidth];\r\n    }\r\n\r\n    /**\r\n     * Updates the snake's coordinates\r\n     *\r\n     * @param direction Direction the snake is going in\r\n     * @param ateConsumable If true, the snake grows by one cell\r\n     */\r\n    public void updateSnakeCoordinates(Direction direction, boolean ateConsumable) {\r\n        if (direction == null)\r\n            throw new IllegalArgumentException(\"Direction must not be null\");\r\n\r\n        if(ateConsumable)\r\n            snakeCoords.remove(snakeCoords.size() - 1); // remove tail\r\n\r\n        int headX = snakeCoords.get(0).getX();\r\n        int headY = snakeCoords.get(0).getY();\r\n        Coordinate newHeadCoords = null;\r\n        switch (direction) {\r\n            case UP -> newHeadCoords = new Coordinate(headX, headY + 1);\r\n            case RIGHT -> newHeadCoords = new Coordinate(headX + 1, headY);\r\n            case DOWN -> newHeadCoords = new Coordinate(headX, headY - 1);\r\n            case LEFT -> newHeadCoords = new Coordinate(headX - 1, headY);\r\n        }\r\n        snakeCoords.add(0, newHeadCoords);\r\n    }\r\n\r\n    /**\r\n     * Spawns a new consumable on the game board\r\n     */\r\n    public void spawnConsumable(){\r\n        Random random = new Random();\r\n        int xRandom=random.nextInt(gameBoardWidth-1);\r\n        int yRandom=random.nextInt(gameBoardHeight-1);\r\n        consumableCoords.add(new Coordinate(xRandom, yRandom));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/snaked/model/GameBoard.java b/src/main/java/snaked/model/GameBoard.java
--- a/src/main/java/snaked/model/GameBoard.java	(revision 31fae6b0df4d19346f4ecd22c62a494bf150f683)
+++ b/src/main/java/snaked/model/GameBoard.java	(date 1669894622130)
@@ -1,45 +1,46 @@
 package snaked.model;
 
 import lombok.Getter;
+import lombok.Setter;
 
 import java.nio.file.Path;
 import java.util.*;
 
+// TODO: use lists instead of multi-dim-array, but with function to get multi-dim-array
 public class GameBoard {
-    private final BoardCell[][] cells;
-
     private List<Coordinate> snakeCoords = new ArrayList<>();
-    @Getter
-    private final Path backgroundImage;
-    @Getter
-    private final int gameBoardHeight;
-    @Getter
-    private final int gameBoardWidth;
+    private Set<Coordinate> consumableCoords = new HashSet<>();
+    private Set<Coordinate> wallCoords = new HashSet<>();
+
+    private Snake snake;
 
-    public GameBoard(int gameBoardHeight, int gameBoardWidth, Path backgroundImage) {
+    @Setter private Direction currentDirection;
+
+    @Getter private final Path backgroundImage;
+    @Getter private final int gameBoardHeight;
+    @Getter private final int gameBoardWidth;
+    @Getter private final GameOptions gameOptions;
+
+    public GameBoard(int gameBoardHeight, int gameBoardWidth, Path backgroundImage, GameOptions gameOptions) {
         this.gameBoardHeight = gameBoardHeight;
         this.gameBoardWidth = gameBoardWidth;
         this.backgroundImage = backgroundImage;
-        cells = new BoardCell[gameBoardHeight][gameBoardWidth];
+        this.gameOptions = gameOptions;
     }
 
     /**
      * Updates the snake's coordinates
      *
-     * @param direction Direction the snake is going in
      * @param ateConsumable If true, the snake grows by one cell
      */
-    public void updateSnakeCoordinates(Direction direction, boolean ateConsumable) {
-        if (direction == null)
-            throw new IllegalArgumentException("Direction must not be null");
-
+    private void moveSnake(boolean ateConsumable) {
         if(ateConsumable)
             snakeCoords.remove(snakeCoords.size() - 1); // remove tail
 
         int headX = snakeCoords.get(0).getX();
         int headY = snakeCoords.get(0).getY();
         Coordinate newHeadCoords = null;
-        switch (direction) {
+        switch (currentDirection) {
             case UP -> newHeadCoords = new Coordinate(headX, headY + 1);
             case RIGHT -> newHeadCoords = new Coordinate(headX + 1, headY);
             case DOWN -> newHeadCoords = new Coordinate(headX, headY - 1);
@@ -51,10 +52,25 @@
     /**
      * Spawns a new consumable on the game board
      */
-    public void spawnConsumable(){
+    private void spawnConsumable(){
         Random random = new Random();
         int xRandom=random.nextInt(gameBoardWidth-1);
         int yRandom=random.nextInt(gameBoardHeight-1);
         consumableCoords.add(new Coordinate(xRandom, yRandom));
     }
+
+    public boolean checkAlive(){
+        return true;
+        //TODO: complete this method
+    }
+
+    public boolean nextTurn(){
+        moveSnake(false); // TODO: update ateConsumable
+
+        return checkAlive();
+    }
+    public int getScore (){
+        return snake.getEatenConsumables()*gameOptions.getDifficulty().getScoreMultiplier();
+    }
+
 }
